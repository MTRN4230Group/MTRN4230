MODULE G5_Rob_Proc(SYSMODULE, NOSTEPIN, READONLY)
    RECORD robostate
        !Author: Roshen Mathew
        !Date Created: 2/5/16 
        !Date Modified Last: 2/5/16
        !struct of the linear position of the end effector
        num Xpos;
        num Ypos;
        num Zpos;
    ENDRECORD
    
     VAR num value;
     
PROC ListenForAndAcceptConnection()
        !Author: Roshen Mathew
        !Date Created: 2/5/16 
        !Date Modified Last: 2/5/16
        !connects the socket to matlab
        
        
        ! Create the socket to listen for a connection on.
        VAR socketdev welcome_socket;
        SocketClose client_socket;
        SocketCreate welcome_socket;

        ! Bind the socket to the host and port.
        SocketBind welcome_socket, host, port;
        
        ! Listen on the welcome socket.
        SocketListen welcome_socket;
        
        ! Accept a connection on the host and port.
        SocketAccept welcome_socket, client_socket;
        
        ! Close the welcome socket, as it is no longer needed.
        SocketClose welcome_socket;
        
    ENDPROC
    
 FUNC num StartServer1()
     !Author: Roshen Mathew
     !Date Created: 2/5/16 
     !Date Modified Last: 2/5/16
     !Starts to connect RS to matlab. if there is no connection, it will keep retrying.
     VAR string received_str;
     VAR num value := -1;   
        ListenForAndAcceptConnection;
            
        ! Receive a string from the client.
        SocketReceive client_socket \Str:=received_str;
        
        IF received_str = "G01 1" THEN 
            ! Send the string back to the client, adding a line feed character.
            SocketSend client_socket \Str:=("100 0" + "\0A");
            value:= 0;
        ELSE
            value := 1;
        ENDIF
        
        RETURN value;
        
ERROR
           IF ERRNO=ERR_SOCK_TIMEOUT THEN
               RETRY;
           ENDIF
        
 ENDFUNC
 
     ! Close the connection to the client.
PROC CloseConnection()
     
ENDPROC
    
    FUNC num detQuad (num Y)
        !Author: Roshen Mathew
        !Date Created: 10/5/16 
        !Date Modified Last: 10/5/16
        !determines which quadrant the chocolate is in to determine whether the angles are +ive or -ive.
        
        currentR;
        IF Y > 0 THEN
            return 1;
        ELSEIF Y < 0 THEN 
            return 2;
        ELSEIF Y = 0 THEN 
            return 3;
        ENDIF    
    ENDFUNC
    
    FUNC num j1swing(num alpha, num quadrant)
        !Author: Roshen Mathew
        !Date Created: 9/5/16 
        !Date Modified Last: 9/5/16
        !moves the robot to the intermediate position at edge of table by moving the joint, q1 at the base
        VAR num theta;
        beta := ATAN2(133,400);
        
        IF quadrant = 1 THEN
            theta := alpha - beta;
        ELSEIF quadrant = 2 THEN 
            theta := 180 - beta - alpha;
        ELSEIF quadrant = 3 THEN
            theta := 90 - beta;
        endif
        
        RETURN theta;
    ENDFUNC
    
    FUNC num j6swing(num alpha, num quadrant)
        !Author: Roshen Mathew
        !Date Created: 9/5/16 
        !Date Modified Last: 9/5/16
        !Rotates the endeffector to place the chocolate in the right orientation
        
        VAR num gamma;  
        beta := ATAN2(133,400);
        
        IF quadrant = 1 THEN
            gamma := -(90 - alpha + beta);
        ELSEIF quadrant = 2 THEN 
            gamma := -(beta - alpha - 90);
        ELSEIF quadrant = 3 THEN
            gamma := -(beta);
        endif
        
        RETURN gamma;
    ENDFUNC
    
    FUNC bool tableToTable(num xi, num yi, num zi, num theta_i, num xf, num yf, num zf,  num theta_f)
        !Author: Roshen Mathew
        !Date Created: 24/5/16 
        !Date Modified Last: 24/5/16
        !Picks up choclate on table and places it into a stack on end of table based on flavour
        MoveToCalibPos;
        
	    currentJ;
        j5 := 90;
        updateJoints;
        
        !Move to location for pick up
        currentR;
        Xpos := xi;
        Ypos := yi;
        Zpos := 200;
        updateEE;
        
        !Drop to chocolate
        currentR;
        Xpos := xi;
        Ypos := yi;
	    Zpos := zi;
        updateEE;
        
        !Grip chocolate
        TurnVacOn;
        TurnSolOn;
        
        !Lift
        currentR;
	    Xpos := xi;
        Ypos := yi;
        Zpos := 200;
        updateEE;
        
        !Rotate chocolate
        currentJ;
        j6 := j6 - theta_i;
        updateJoints;
        
        !Intermediate Position
        currentR;
        Xpos := 300;
        Ypos := 0;
        Zpos := 200;
        updateEE;
        
        !Table Destination
        currentR;
        Xpos := xf;
        Ypos := yf;
        Zpos := 200;
        updateEE;
        
        !Rotate to stack orientation
        currentJ;
        j6 := j6 + theta_f;
        updateJoints;
        
        !Drop to stack
        currentR;
	    Xpos := xf;
        Ypos := yf;
        Zpos := zf;
        updateEE;
        
        !Release chocolate
        TurnSolOff;
        TurnVacOff;
        
        !Lift
        currentR;
	    Xpos := xf;
        Ypos := yf;
        Zpos := 200;
        updateEE;
        
        RETURN TRUE;
        
    ENDFUNC
    
    
    FUNC bool tableToFlip(num xi, num yi, num zi, num theta_i)
        !Author: Roshen Mathew
        !Date Created: 17/5/16 
        !Date Modified Last: 24/5/16
        !picks up chocolate and moves it to intermediate position on edge of table above conveyor
        !in order to drop it and flip the chocolate
        VAR num x1 := 0;
        var num y1 := 0;
        
        MoveToCalibPos;
        
	    currentJ;
        !j1 := 90;
        j5 := 90;
        updateJoints;
            
	    !Move to location for pick up
        currentR;
        Xpos := xi;
        Ypos := yi;
        Zpos := 200;
        updateEE;
        
        !WaitTime 0.5;
        !single stack;
        !Zpos := 150;
        
        !double stack
        !Zpos := 153;
        
        !triple stack
        !Zpos := 157;
        
        !Drop to chocolate
	    Xpos := xi;
        Ypos := yi;
	    Zpos := zi;
        updateEE;
        
        !Pick up chocolate
        !WaitTime 1;
        TurnVacOn;
        TurnSolOn;
        
        !Raise chocolate
	    Xpos := xi;
        Ypos := yi;
        Zpos := 200;
        updateEE;
        !WaitTime 0.5;
        
        ! To avoid singularities from quadrant 2 
        IF yi < 0 THEN 
            Xpos := 300;
            Ypos := 0;
            Zpos := 200;
            updateEE;
        ENDIF
        
        !Move linearly to flip point
        Xpos := 133;
        Ypos := 400;
        Zpos := 200;
        updateEE;
        WaitTime 0.5;

	
	!Rotate to be perpendicular to table
        currentJ;
        j6:= j6 - theta_i + 90;
        updateJoints;

        TurnSolOff;
        TurnVacOff;
        
	    ConAwayRob;
        TurnConOnSafely;
        WaitTime 0.5;
        TurnConOff;
        
        
        RETURN TRUE;
       	
        
    ENDFUNC
    
FUNC bool flipRetrieval(num xi, num yi, num zi, num theta_i, num xf, num yf, num zf,  num theta_f)
        !Author: Roshen Mathew
        !Date Created: 17/5/16 
        !Date Modified Last: 24/5/16
        !after matlab determines hoclate position on conveyor, robot will pick up chocolate and place it
        !into the stack
        
        !Flip retrieval
        MoveToCalibPos;
        
	    currentJ;
        j5 := 90;
        updateJoints;
        
        !Flip landing position
        currentR;
        Xpos := xi;
        Ypos := yi;
        Zpos := 200;
        updateEE;
        WaitTime 0.5;
        
        !Drop to chocolate
        currentR;
        Xpos := xi;
        Ypos := yi;
        Zpos := zi;
        updateEE;
        WaitTime 0.5;
        
        !Grip
        TurnVacOn;
        TurnSolOn;
        
        !Lift
        currentR;
        Xpos := xi;
        Ypos := yi;
        Zpos := 42;
        updateEE;
        WaitTime 0.5;
        
        !Rotate to parallel of table edge
        currentJ;
        j6 := j6 - theta_i;
        updateJoints;
        WaitTime 0.5;
        
        !Lift above table
        currentR;
        Xpos := xi;
        Ypos := yi;
        Zpos := 200;
        updateEE;
        WaitTime 0.5;
        
        !Go to intermediate position to avoid singularities
        currentR;
        Xpos := 133;
        Ypos := 400;
        Zpos := 200;
        updateEE;
        WaitTime 0.5;
        
        IF yf < 0 THEN
            !Second Intermediate point
            currentR;
            Xpos := 400;
            Ypos := 0;
            Zpos := 200;
            updateEE;
            WaitTime 0.5;
        
            currentJ;
            j1 := -90;
            j6 := j6 - 90;
            updateJoints;
        ENDIF
        
        !Go to stack destination x,y
        currentR;
        Xpos := xf;
        Ypos := yf;
        Zpos := 200;
        updateEE;
        WaitTime 0.5;
        
        !Rotate to stack orientation
        currentJ;
        j6 := j6 + theta_f;
        updateJoints;
        WaitTime 0.5;
        
        !Drop to destination
        currentR;
        Xpos := xf;
        Ypos := yf;
        Zpos := zf;
        updateEE;
        WaitTime 0.5;
        
        !Release grip
        TurnSolOff;
        TurnVacOff;
        
        !Lift
        currentR;
        Xpos := xf;
        Ypos := yf;
        Zpos := 200;
        updateEE;

	    ConToRob;
        TurnConOnSafely;
        WaitTime 0.5;
        TurnConOff;
        
        RETURN TRUE;
        
    ENDFUNC
    
    FUNC bool tableToConveyer(num xi, num yi, num zi, num theta_i, num xf, num yf, num zf,  num theta_f)
        !Author: Roshen Mathew
        !Date Created: 17/5/16 
        !Date Modified Last: 31/5/16
        !picks up choclate on table and places into desired position into box on conveyor
        
        VAR num x1 := 0;
        var num y1 := 0;
        
        MoveToCalibPos;
        
	    currentJ;
        !j1 := 90;
        j5 := 90;
        updateJoints;
        
        currentR;
        Xpos := xi;
        Ypos := yi;
        Zpos := 200;
        updateEE;
        
        !WaitTime 0.5;
        !single stack;
        !Zpos := 150;
        
        !double stack
        !Zpos := 153;
        
        !triple stack
        !Zpos := 157;
        
        !Move to chocolate
	    currentR;
	    Xpos := xi;
        Ypos := yi;
        Zpos := zi;
        updateEE;
        
        !Pick up chocolate
        !WaitTime 1;
        TurnVacOn;
        TurnSolOn;
        
        !Raise chocolate
	    currentR;
	    Xpos := xi;
        Ypos := yi;
        Zpos := 200;
        updateEE;
        !WaitTime 0.5;
        
        !Rotate for flipping
        currentJ;
        j6 := j6 - theta_i + 90;
        updateJoints;
        WaitTime 0.5;
        
        ! To avoid singularities from quadrant 2 
        IF yi < 0 THEN 
            Xpos := 300;
            Ypos := 0;
            Zpos := 200;
            updateEE;
        ENDIF

        
        !Move linearly to conveyer
        currentR;
	    Xpos := 133;
        Ypos := 400;
        Zpos := 200;
        updateEE;
        WaitTime 0.5;
        
        currentR;
        Xpos := xf;
        Ypos := yf;
        Zpos := 200; 
        updateEE;
        WaitTime 0.5;
        
        !Rotate for the 'box' orientation
        currentJ;
        j6 := j6 + theta_f - 90;
        updateJoints;
        
        currentR;
        Xpos := xf;
        Ypos := yf;
        Zpos := zf; 
        updateEE;
        WaitTime 0.5;
        
        TurnSolOff;
        TurnVacOff;
        
        !Lift
        currentR;
	    Xpos := xf;
        Ypos := yf;
        Zpos := 200;
        updateEE;
        
        RETURN TRUE;
        
    ENDFUNC
    
    FUNC bool conveyerToTable(num xi, num yi, num zi, num theta_i, num xf, num yf, num zf,  num theta_f)
        !Author: Roshen Mathew
        !Date Created: 24/5/16 
        !Date Modified Last: 24/5/16
        !pick up chocolate in box and place it onto the stack
        MoveToCalibPos;
        
	    currentJ;
        j5 := 90;
        updateJoints;
        
        !Move linearly to flip point
        currentR;
        Xpos := 133;
        Ypos := 400;
        Zpos := 200;
        updateEE;
        WaitTime 0.5;
        
        !Move to location for pick up
        currentR;
        Xpos := xi;
        Ypos := yi;
        Zpos := 200;
        updateEE;
        WaitTime 0.5;
        
        !Drop to chocolate
        currentR;
        Xpos := xi;
        Ypos := yi;
        Zpos := zi;
        updateEE;
        WaitTime 0.5;
        
        !Grip chocolate
        TurnVacOn;
        TurnSolOn;
        
        !Lift
        currentR;
        Xpos := xi;
        Ypos := yi;
        Zpos := 200;
        updateEE;
        WaitTime 0.5;
        
        !Rotate chocolate
        currentJ;
        j6 := j6 - theta_i;
        updateJoints;
        WaitTime 0.5;
        
        !Go to intermediate position to avoid singularities
        currentR;
        Xpos := 133;
        Ypos := 400;
        Zpos := 200;
        updateEE;
        WaitTime 0.5;
        
        IF yf < 0 THEN
            !Second Intermediate point
            currentR;
            Xpos := 400;
            Ypos := 0;
            Zpos := 200;
            updateEE;
            WaitTime 0.5;
        
            currentJ;
            j1 := -90;
            j6 := j6 - 90;
            updateJoints;
        ENDIF
        
        !Go to stack destination x,y
        currentR;
        Xpos := xf;
        Ypos := yf;
        Zpos := 200;
        updateEE;
        WaitTime 0.5;
        
        !Rotate to stack orientation
        currentJ;
        j6 := j6 + theta_f;
        updateJoints;
        WaitTime 0.5;
        
        !Drop to destination
        currentR;
        Xpos := xf;
        Ypos := yf;
        Zpos := zf;
        updateEE;
        WaitTime 0.5;
        
        !Release chocolate
        TurnSolOff;
        TurnVacOff;
        
        !Lift
        currentR;     
        Xpos := xf;
        Ypos := yf;
        Zpos := 200;
        updateEE;
        WaitTime 0.5;
        
        RETURN TRUE;
        
    ENDFUNC

    PROC outofWay()
        !Author: Roshen Mathew
        !Date Created: 17/5/16 
        !Date Modified Last: 17/5/16
        !moves robot out of the cameras' views for clear images
	
	    j1 := -90;
	    updateJoints;

    ENDPROC
    
    PROC updateJoints()
        !Author: Roshen Mathew
        !Date Created: 2/5/16 
        !Date Modified Last: 2/5/16
        !update robot target and moves by joints
        JTarget.robax := [j1,j2,j3,j4,j5,j6];
        MoveAbsJ JTarget,robSpeed,fine,tSCup;
        
    ENDPROC
    
    PROC updateEE()
        !Author: Roshen Mathew
        !Date Created: 2/5/16 
        !Date Modified Last: 2/5/16
        !update robot target and moves linearly
        RTarget.trans := [Xpos,Ypos,Zpos];
        MoveL RTarget,robSpeed,fine,tSCup;
        !MoveToPoint(RTarget);
    ENDPROC
    
    
    PROC SetSpeed(VAR speeddata speed)
        !Author: Roshen Mathew
        !Date Created: 2/5/16 
        !Date Modified Last: 2/5/16
        !set speed of robot
        robSpeed := speed;
    ENDPROC
    
    PROC MoveToPoint(robtarget target)
        !Author: Roshen Mathew
        !Date Created: 2/5/16 
        !Date Modified Last: 2/5/16
        !move robot to robtarget
        
        ! Call 'MoveL' with the input arguments provided.
        !MoveL Offs(target, 0, 0, 0), robSpeed, fine, tSCup;
        MoveL Offs(target, 0, 0, 0), robSpeed, fine, tSCup;
        
    ENDPROC
    
 PROC MoveToCalibPos()
     !Author: Roshen Mathew
        !Date Created: 2/5/16 
        !Date Modified Last: 2/5/16
        !move to home position
     
 MoveAbsJ jtCalibPos,robSpeed,fine,tool0;

 ENDPROC
 
 PROC BreakSingularity()
     !Author: Roshen Mathew
        !Date Created: 2/5/16 
        !Date Modified Last: 2/5/16
        !if there is a singularity, move joints 4 and 6 to break the singularity
     VAR jointtarget joint;
     joint := CJointT();
     !joint := joint + [[0,0,0,0,pi/2,0],[0,0,0,0,0,0]];
     MoveAbsJ joint,robSpeed,fine,tool0;
 ENDPROC
 
 PROC currentJ()
     !Author: Roshen Mathew
        !Date Created: 2/5/16 
        !Date Modified Last: 2/5/16
        !update robot join targets
     JTarget := CJointT();
     j1 := JTarget.robax.rax_1;
     j2 := JTarget.robax.rax_2;
     j3 := JTarget.robax.rax_3;
     j4 := JTarget.robax.rax_4;
     j5 := JTarget.robax.rax_5;
     j6 := JTarget.robax.rax_6;
     !(curJTarget);
 ENDPROC
 
 PROC currentR()
     !Author: Roshen Mathew
        !Date Created: 2/5/16 
        !Date Modified Last: 2/5/16
        !update robot linear targets
     RTarget := CalcRobT(JTarget,tSCup \WObj:= wobj0);
     Xpos := RTarget.trans.x;
     Ypos := RTarget.trans.y;
     Zpos := RTarget.trans.z;
 ENDPROC  

 
 PROC TurnVacOn()
     !Author: Roshen Mathew
        !Date Created: 2/5/16 
        !Date Modified Last: 2/5/16
        !turn vacuum on
        
        ! Set VacRun on.
        SetDO DO10_1, 1;
        value := 1;
        
  ENDPROC
   
    PROC TurnVacOff()
        !Author: Roshen Mathew
        !Date Created: 2/5/16 
        !Date Modified Last: 2/5/16
        !turn vacuum off
        
        ! Set VacRun off.
        SetDO DO10_1, 0;
        value := 0;
        
    ENDPROC
    
  PROC TurnSolOn()
        !Author: Roshen Mathew
        !Date Created: 2/5/16 
        !Date Modified Last: 2/5/16
        !turn vacuum sol on
        ! Set VacSol on.
        IF  value = 1 THEN
            SetDO DO10_2, 1;
        ELSE
            SetDO DO10_2, 0;
        ENDIF
        
  ENDPROC
  
  PROC TurnSolOff()
      !Author: Roshen Mathew
        !Date Created: 2/5/16 
        !Date Modified Last: 2/5/16
        !turn vacuum sol off
            SetDO DO10_2, 0;
  ENDPROC
    
    
    
    PROC ConToRob()
        !Author: Roshen Mathew
        !Date Created: 2/5/16 
        !Date Modified Last: 2/5/16
        !set conveyor direction towards robot
        SetDO DO10_4, 1;
    ENDPROC
    
    PROC ConAwayRob()
        !Author: Roshen Mathew
        !Date Created: 2/5/16 
        !Date Modified Last: 2/5/16
        !set conveyor direction away from robot
        SetDO DO10_4, 0;
    ENDPROC
    
    PROC TurnConOnSafely()
        !Author: Roshen Mathew
        !Date Created: 2/5/16 
        !Date Modified Last: 2/5/16
        !turn conveyor on
        
        ! An example of how an IF statement is structured.
        ! DI10_1 is 'ConStat', and will only be equal to 1 if the conveyor is on and ready to run.
        ! If it is ready to run, we will run it, if not, we will set it off so that we can fix it.
        IF DI10_1 = 1 THEN
            SetDO DO10_3, 1;
        ELSE
            SetDO DO10_3, 0;
        ENDIF
        
    ENDPROC
    
    
    PROC TurnConOff()
        !Author: Roshen Mathew
        !Date Created: 2/5/16 
        !Date Modified Last: 2/5/16
        !turn conveyor off
        
        SetDO DO10_3, 0;
        
    ENDPROC
    
    PROC StartGui()
        
    ENDPROC
    
 
    
    
 
 
    
 
 
 
     
 
    
    
    
ENDMODULE