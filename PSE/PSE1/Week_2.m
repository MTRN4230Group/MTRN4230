% Week 2 Problem Solving
% Author: Paul Tran z5018155
% S2 2018 MTRN4230 Robotics

%Part A
clf; clear; clc;
figure(1);
imgA1 = imread('board.tif');
imgA2 = createMask(imgA1);
gray = rgb2gray(imgA1);
imgA1(:,:,1) = 0;
imgA1(:,:,3) = 0;
imshow(imgA1);

xy = size(imgA2);
for i = 1:xy(1)
    for j = 1:xy(2)
        if imgA2(i,j) == 0
            imgA1(i,j,:) = gray(i,j)/2;
        end
    end
end

figure(2);
imshow(imgA1);

%Part B
imgB1 = imread('hands2.jpg');
%figure(3);
%imshow(imgB1);
imgB2 = edge(rgb2gray(imgB1),'sobel');
%figure(4);
imerode(imgB2,strel('cube',10));
%imshow(imgB2);
xy = size(imgB2);
for i = 1:xy(1)
    for j = 1:xy(2)
        if imgB2(i,j) == 1
            imgB1(i,j,:) = 0;
        end
    end
end
%figure(5)
%imshow(imgB1);


function [BW,maskedRGBImage] = createMask(RGB)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder app. The colorspace and
%  range for each channel of the colorspace were set within the app. The
%  segmentation mask is returned in BW, and a composite of the mask and
%  original RGB images is returned in maskedRGBImage.

% Auto-generated by colorThresholder app on 06-Aug-2018
%------------------------------------------------------


% Convert RGB image to chosen color space
I = RGB;

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.000;
channel1Max = 78.000;

% Define thresholds for channel 2 based on histogram settings
channel2Min = 0.000;
channel2Max = 216.000;

% Define thresholds for channel 3 based on histogram settings
channel3Min = 0.000;
channel3Max = 84.000;

% Create mask based on chosen histogram thresholds
sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
BW = sliderBW;

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

end
