MODULE G5_Rob_Proc(SYSMODULE, NOSTEPIN, READONLY)
    RECORD robostate
        num Xpos;
        num Ypos;
        num Zpos;
    ENDRECORD
    
     VAR num value;
    
    FUNC num detQuad (num Y)
        currentR;
        IF Y > 0 THEN
            return 1;
        ELSEIF Y < 0 THEN 
            return 2;
        ELSEIF Y = 0 THEN 
            return 3;
        ENDIF    
    ENDFUNC
    
    FUNC num j1swing(num alpha, num quadrant)
        VAR num theta;
        
        IF quadrant = 1 THEN
            theta := alpha - beta;
        ELSEIF quadrant = 2 THEN 
            theta := 180 - beta - alpha;
        ELSEIF quadrant = 3 THEN
            theta := 90 - beta;
        endif
        
        RETURN theta;
    ENDFUNC
    
    FUNC num j6swing(num alpha, num quadrant)

        VAR num gamma;     
        
        IF quadrant = 1 THEN
            gamma := -(90 - alpha + beta);
        ELSEIF quadrant = 2 THEN 
            gamma := -(beta - alpha - 90);
        ELSEIF quadrant = 3 THEN
            gamma := -(beta);
        endif
        
        RETURN gamma;
    ENDFUNC
    
    
    PROC updateJoints()
        JTarget.robax := [j1,j2,j3,j4,j5,j6];
        MoveAbsJ JTarget,robSpeed,fine,tSCup;
        
    ENDPROC
    
    PROC updateEE()
        RTarget.trans := [Xpos,Ypos,Zpos];
        MoveL RTarget,robSpeed,fine,tSCup;
        !MoveToPoint(RTarget);
    ENDPROC
    
    
    PROC SetSpeed(VAR speeddata speed)
        robSpeed := speed;
    ENDPROC
    
    PROC MoveToPoint(robtarget target)
        
        ! Call 'MoveL' with the input arguments provided.
        !MoveL Offs(target, 0, 0, 0), robSpeed, fine, tSCup;
        MoveL Offs(target, 0, 0, 0), robSpeed, fine, tSCup;
        
    ENDPROC
    
 PROC MoveToCalibPos()
     
 MoveAbsJ jtCalibPos,robSpeed,fine,tool0;

 ENDPROC
 
 PROC BreakSingularity()
     VAR jointtarget joint;
     joint := CJointT();
     !joint := joint + [[0,0,0,0,pi/2,0],[0,0,0,0,0,0]];
     MoveAbsJ joint,robSpeed,fine,tool0;
 ENDPROC
 
 PROC currentJ()
     JTarget := CJointT();
     j1 := JTarget.robax.rax_1;
     j2 := JTarget.robax.rax_2;
     j3 := JTarget.robax.rax_3;
     j4 := JTarget.robax.rax_4;
     j5 := JTarget.robax.rax_5;
     j6 := JTarget.robax.rax_6;
     !(curJTarget);
 ENDPROC
 
 PROC currentR()
     RTarget := CalcRobT(JTarget,tSCup \WObj:= wobj0);
     Xpos := RTarget.trans.x;
     Ypos := RTarget.trans.y;
     Zpos := RTarget.trans.z;
 ENDPROC  

 
 PROC TurnVacOn()
        
        ! Set VacRun on.
        SetDO DO10_1, 1;
        value := 1;
        
  ENDPROC
   
    PROC TurnVacOff()
        
        ! Set VacRun off.
        SetDO DO10_1, 0;
        value := 0;
        
    ENDPROC
    
  PROC TurnSolOn()
        
        ! Set VacSol on.
        IF  value = 1 THEN
            SetDO DO10_2, 1;
        ELSE
            SetDO DO10_2, 0;
        ENDIF
        
  ENDPROC
  
  PROC TurnSolOff()
            SetDO DO10_2, 0;
  ENDPROC
    
    
    
    PROC ConToRob()
        SetDO DO10_4, 1;
    ENDPROC
    
    PROC ConAwayRob()
        SetDO DO10_4, 0;
    ENDPROC
    
    PROC TurnConOnSafely()
        
        ! An example of how an IF statement is structured.
        ! DI10_1 is 'ConStat', and will only be equal to 1 if the conveyor is on and ready to run.
        ! If it is ready to run, we will run it, if not, we will set it off so that we can fix it.
        IF DI10_1 = 1 THEN
            SetDO DO10_3, 1;
        ELSE
            SetDO DO10_3, 0;
        ENDIF
        
    ENDPROC
    
    
    PROC TurnConOff()
        
        SetDO DO10_3, 0;
        
    ENDPROC
    
    PROC StartGui()
        
    ENDPROC
    
 
    
    
 
 
    
 
 
 
     
 
    
    
    
ENDMODULE